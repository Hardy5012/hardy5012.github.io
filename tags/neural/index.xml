<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>neural on Leaning Hardy</title>
    <link>https://hardy5012.github.io/tags/neural/</link>
    <description>Recent content in neural on Leaning Hardy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hardy5012.github.io/tags/neural/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Machine Learning(3) Neural Networks</title>
      <link>https://hardy5012.github.io/post/2017-05-07-machine-learning%E4%B8%89-neural-networks/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/2017-05-07-machine-learning%E4%B8%89-neural-networks/</guid>
      <description>Model Representation  \text {If network has $s_j$ units in layer $j$ and $sj+1$ units in layer $j+1$, then $Θ(j)$ will be of dimension $sj+1 × (s_j + 1)$.}  Cost Function   Let&amp;#39;s first define a few variables that we will need to use: L = total number of layers in the network $s_l$ = number of units (not counting bias unit) in layer l K = number of output units/classes   \begin{gather*} J(Θ) = - \frac{1}{m} ∑i=1^m ∑k=1^K ≤ft[y(i)_k log ((h_Θ (x(i)))_k) + (1 - y(i)_k)log (1 - (h_Θ(x(i)))_k)\right] + \frac{λ}{2m}∑l=1L-1 ∑i=1s_l ∑j=1^{sl+1} ( Θj,i(l))^2\end{gather*} Gradient Checking   Gradient checking will assure that our backpropagation works as intended.</description>
    </item>
    
  </channel>
</rss>