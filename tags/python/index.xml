<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Leaning Hardy</title>
    <link>https://hardy5012.github.io/tags/python/</link>
    <description>Recent content in python on Leaning Hardy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 09 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hardy5012.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>super 没那么简单</title>
      <link>https://hardy5012.github.io/2018/10/09/super%E6%B2%A1%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/2018/10/09/super%E6%B2%A1%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/</guid>
      <description>大家都知道使用 super 来调用父类了方法，但如何正确使用 super 普遍知之甚少。 为了弄清它的原理，我们需要花点时间解释下 Python 是如何实现继承的。 对于你定义的每一</description>
    </item>
    
    <item>
      <title>python 协程</title>
      <link>https://hardy5012.github.io/2017/11/26/python%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/2017/11/26/python%E5%8D%8F%E7%A8%8B/</guid>
      <description>协程 协程是一种用户态的轻量级线程，因为是非抢占式的，所以协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上</description>
    </item>
    
    <item>
      <title>Python 虚拟环境</title>
      <link>https://hardy5012.github.io/2017/06/06/2017-06-06-python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/2017/06/06/2017-06-06-python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>Virtualenv Introduction virtualenv is a tool to create isolated Python environments. Installation 1 sudo pip install virtualenv {{{more}}} Usage 1.为一个工程创建一个虚拟环境： 1 2 cd my_project_folder virtualenv venv virtualenv venv 将会在当前的目录中创建一个文件夹，包含了 Python 可执行文件，</description>
    </item>
    
    <item>
      <title>python notes</title>
      <link>https://hardy5012.github.io/2016/11/16/2016-11-16-python-notes/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/2016/11/16/2016-11-16-python-notes/</guid>
      <description>yield yield 为生成器，有调用 next 或 send 来取值（只有调用这两个函数才会运行） 在 yield 处返回数据，用 send 来发送数据到程序内 1 2 3 4 5 6 7 8 9 10 11 12 13 def h(): print &amp;#39;Wen Chuan&amp;#39;, m =</description>
    </item>
    
  </channel>
</rss>