<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Learning Hardy</title>
    <link>https://hardy5012.github.io/categories/notes/</link>
    <description>Recent content in notes on Learning Hardy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 26 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hardy5012.github.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python 协程</title>
      <link>https://hardy5012.github.io/post/python%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/python%E5%8D%8F%E7%A8%8B/</guid>
      <description>协程     协程是一种用户态的轻量级线程，因为是非抢占式的，所以协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。    协程的本质上是：allowing multiple entry points for suspending and resuming execution at certain locations.允许多个入口对程序进行挂起、继续执行等操作   yield     带有 yield 的函数不再是一个普通函数，而是一个生成器 generator.    调用生成器得到一个迭代器，利用 next()或 send(msg)不断获取数据.    调用者使用 send 方法传给 yield 表达式一个值，并从下一个 yield 表达式获取一个值.   def jump_range(upper): index = 0 while index &amp;lt; upper: jump = yield index if jump is None: jump = 1 index += jump jump = jump_range(5) print(jump) print(jump.</description>
    </item>
    
    <item>
      <title>linux 环境</title>
      <link>https://hardy5012.github.io/post/linux%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/linux%E7%8E%AF%E5%A2%83/</guid>
      <description>翻墙  ssh  sudo ssh -qTfnN -D 8087 user@remote-hosts   上面的 8087 是本地未被占用的端口，可以自己选择。其它参数的意思是： -q :- be very quite, we are acting only as a tunnel. -T :- Do not allocate a pseudo tty, we are only acting a tunnel. -f :- move the ssh process to background, as we don’t want to interact with this ssh session directly. -N :- Do not execute remote command. -n :- redirect standard input to /dev/null.</description>
    </item>
    
    <item>
      <title>HeroKu</title>
      <link>https://hardy5012.github.io/post/2017-06-07-heroku/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/2017-06-07-heroku/</guid>
      <description> 安装  sudo yum install ruby gem sudo gem install json_pure sudo gem install rails sudo gem install bundler sudo gem install heroku    {{{more}}} </description>
    </item>
    
    <item>
      <title>makefile</title>
      <link>https://hardy5012.github.io/post/2017-04-25-makefile/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/2017-04-25-makefile/</guid>
      <description> undefined reference 问题  多个库文件连接顺序问题   在链接命令中给出所依赖的库时，需要注意库之间的依赖顺序，依赖其他库的库一定要放到被依赖库的前面，这样才能真正避免 undefined reference 的错误  {{{more}}} </description>
    </item>
    
    <item>
      <title>ETF notes</title>
      <link>https://hardy5012.github.io/post/2016-11-28-etf-notes/</link>
      <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/2016-11-28-etf-notes/</guid>
      <description> 预估现金  预估现金为负时，表示 ETF 的市值要比篮子市值少，在做赎回时会先从资金账户中先扣除这部分钱   {{{more}}} 4A1B  A1:期货与现货的价差  A2:A2 交易，也就是市场中很多人称为α套利的交易产品  A3:ETF  </description>
    </item>
    
    <item>
      <title>python notes</title>
      <link>https://hardy5012.github.io/post/2016-11-16-python-notes/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/2016-11-16-python-notes/</guid>
      <description>yield  yield 为生成器，有调用 next 或 send 来取值（只有调用这两个函数才会运行）  在 yield 处返回数据，用 send 来发送数据到程序内  def h(): print &amp;#39;Wen Chuan&amp;#39;, m = yield 5 # Fighting! print m d = yield 12 print &amp;#39;We are together!&amp;#39; if __name__ == &amp;#39;__main__&amp;#39;: c = h() m = c.next() #m 获取了 yield 5 的参数值 5 d = c.send(&amp;#39;Fighting!&amp;#39;) #d 获取了 yield 12 的参数值 12 print &amp;#39;We will never forget the date&amp;#39;, m, &amp;#39;.</description>
    </item>
    
    <item>
      <title>learning boost</title>
      <link>https://hardy5012.github.io/post/2016-11-03-learning-boost/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/2016-11-03-learning-boost/</guid>
      <description> MSM  执行顺序: start state on_exit -&amp;gt; action -&amp;gt; next state on_entry  状态转换判断顺序： 按转表换插入的反序来判断，即在从转换表后面开始判断,同样满足条件的，执行后面  事件只能激活子状态中每组状态机中的一个状态，即显示的激活了一个状态，则对应的默认状态不被激活  转发的事件必须在退出点定义中命名,例 event6 需要在退出状态中定义  struct PseudoExit1 : public msm::front::exit_pseudo_state&amp;lt;event6&amp;gt;    {{{more}}} </description>
    </item>
    
    <item>
      <title>性能分析</title>
      <link>https://hardy5012.github.io/post/2016-09-05-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/2016-09-05-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description> c++ 程序性能分析  环境准备  安装 graphviz  sudo yum install graphviz.x86_64  安装 gprof2dot  sudo pip install gprof2dot  在 makefile 中增加 -pg 参数  导出图片  gprof 程序名 gmon.out|gprof2dot -s | dot -Tpng -o output.png   gprof2dot 后面带参数-s 是简化函数名  {{{more}}} </description>
    </item>
    
    <item>
      <title>编程小记</title>
      <link>https://hardy5012.github.io/post/2016-08-13-%E7%BC%96%E7%A8%8B%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/2016-08-13-%E7%BC%96%E7%A8%8B%E5%B0%8F%E8%AE%B0/</guid>
      <description> ProtoBuf  c++ protobuf 对 inner class 的修改，使用 mutable 来获取 inner class 指针   {{{more}}} </description>
    </item>
    
    <item>
      <title>学习 Spacemacs</title>
      <link>https://hardy5012.github.io/post/2016-07-22-test/</link>
      <pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/post/2016-07-22-test/</guid>
      <description>安装  下载，最新下载地址 http://ftpmirror.gnu.org/emacs/emacs-25.2.tar.xz  安装  sudo yum -y install libXpm-devel libjpeg-turbo-devel openjpeg-devel openjpeg2-devel turbojpeg-devel giflib-devel libtiff-devel gnutls-devel libxml2-devel GConf2-devel dbus-devel wxGTK-devel gtk3-devel ./configure make sudo make install  常用快捷键  vi  normal   r, R: r 修改当个字符，R 则会进入一种 overwrite 模式，可以替换从当前光标开始的任何字符 编辑  删除整行：kill-whole-line (C-S-Backspace)  环境  博客   1.SPC o p: 使用 org-save-and-export 导出博客 2.SPC a S: 发布博客, 使用 prodigy 运行 hexo deploy,里面按 s 键启动 牛人的一些配   https://github.</description>
    </item>
    
  </channel>
</rss>