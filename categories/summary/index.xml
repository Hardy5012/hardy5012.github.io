<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>summary on Leaning Hardy</title>
    <link>https://hardy5012.github.io/categories/summary/</link>
    <description>Recent content in summary on Leaning Hardy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 22 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hardy5012.github.io/categories/summary/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>为运行的容器挂载文件目录</title>
      <link>https://hardy5012.github.io/2018/11/22/%E4%B8%BA%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E6%8C%82%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/2018/11/22/%E4%B8%BA%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E6%8C%82%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/</guid>
      <description>在使用 docker 时，经常需要为已运行的容器挂载文件目录。方法如下: 首先使用 df 查看需要挂载的文件目录是在哪个文件系统上 1 2 3 4 5 #on the host: df /home/huaming_li/github Filesystem 1K-blocks Used Available Use% Mounted</description>
    </item>
    
    <item>
      <title>super 没那么简单</title>
      <link>https://hardy5012.github.io/2018/10/09/super%E6%B2%A1%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/2018/10/09/super%E6%B2%A1%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/</guid>
      <description>大家都知道使用 super 来调用父类了方法，但如何正确使用 super 普遍知之甚少。 为了弄清它的原理，我们需要花点时间解释下 Python 是如何实现继承的。 对于你定义的每一</description>
    </item>
    
    <item>
      <title>centos7 配置 service</title>
      <link>https://hardy5012.github.io/2017/12/07/centos7%E9%85%8D%E7%BD%AEservice/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/2017/12/07/centos7%E9%85%8D%E7%BD%AEservice/</guid>
      <description>配置 service 文件 在/usr/lib/systemd/system/目录创建自己的 service 文件 my.service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</description>
    </item>
    
    <item>
      <title>Python 虚拟环境</title>
      <link>https://hardy5012.github.io/2017/06/06/2017-06-06-python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/2017/06/06/2017-06-06-python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</guid>
      <description>Virtualenv Introduction virtualenv is a tool to create isolated Python environments. Installation 1 sudo pip install virtualenv {{{more}}} Usage 1.为一个工程创建一个虚拟环境： 1 2 cd my_project_folder virtualenv venv virtualenv venv 将会在当前的目录中创建一个文件夹，包含了 Python 可执行文件，</description>
    </item>
    
    <item>
      <title>配置多个 git 账户</title>
      <link>https://hardy5012.github.io/2016/07/26/2016-07-26-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub/</link>
      <pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://hardy5012.github.io/2016/07/26/2016-07-26-%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub/</guid>
      <description>配置多个 git 账户 在使用 ssh keys 时常因为有多个 git 账户，无法正常使用 {{{more}}} 生成 SSH keys 1 ssh-keygen -t rsa -f ~/.ssh/id_github -C &amp;#34;youremail@xxx.com&amp;#34; 在 Git Bash 中执行命令根据提示一路回车，会在~/.ssh/目录</description>
    </item>
    
  </channel>
</rss>